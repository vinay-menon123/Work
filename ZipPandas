def parquet_to_excel_files(input_parquet, output_base_name):
    start_time = time.time()

    table = pq.read_table(input_parquet)
    df = table.to_pandas()

    colors = df['_colors'].tolist()
    df = df.drop('_colors', axis=1)

    total_rows = len(df)
    num_files = math.ceil(total_rows / EXCEL_ROW_LIMIT)

    excel_files = []

    for file_num in range(num_files):
        start_row = file_num * EXCEL_ROW_LIMIT
        end_row = min((file_num + 1) * EXCEL_ROW_LIMIT, total_rows)
        
        wb = Workbook()
        ws = wb.active

        # Write header
        for col_num, column_title in enumerate(df.columns, 1):
            ws.cell(row=1, column=col_num, value=column_title)

        # Write data and apply colors
        yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")

        for row_idx in range(start_row, end_row):
            excel_row_idx = row_idx - start_row + 2  # Excel row starts at 2 (for header row)
            for col_num, value in enumerate(df.iloc[row_idx], 1):
                cell = ws.cell(row=excel_row_idx, column=col_num, value=value)
                if colors[row_idx][col_num - 1]:
                    cell.fill = yellow_fill

        excel_file_name = f"{output_base_name}_{file_num + 1}.xlsx"
        wb.save(excel_file_name)
        excel_files.append(excel_file_name)

        print(f"Created Excel file {file_num + 1} of {num_files}")

    end_time = time.time()
    print(f"Excel conversion completed in {end_time - start_time:.2f} seconds")

    return excel_files
