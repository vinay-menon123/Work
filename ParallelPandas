import pandas as pd
from openpyxl import Workbook, load_workbook
from openpyxl.styles import PatternFill
import time
import math
import chardet
from concurrent.futures import ProcessPoolExecutor
import os
import zipfile
import tempfile

def detect_encoding(file_path):
    with open(file_path, 'rb') as file:
        raw = file.read(10000)
    return chardet.detect(raw)['encoding']

def safe_value(value):
    if isinstance(value, (int, float)):
        if math.isnan(value) or math.isinf(value):
            return ""
    return str(value)

def process_chunk(chunk_data):
    chunk, columns_to_string, column_b_name, column_c_name, filter_value = chunk_data
    
    for col in columns_to_string:
        if col in chunk.columns:
            chunk[col] = chunk[col].astype(str)

    rows = []
    for _, row in chunk.iterrows():
        excel_row = []
        if row[column_b_name] == filter_value:
            columns_to_color = set(str(row[column_c_name]).split(','))
            for j, value in enumerate(row):
                cell_value = safe_value(value)
                if chunk.columns[j] in columns_to_color:
                    excel_row.append((cell_value, True))
                else:
                    excel_row.append((cell_value, False))
        else:
            excel_row = [(safe_value(value), False) for value in row]
        rows.append(excel_row)
    return rows

def extract_csv_from_zip(zip_path):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        csv_files = [f for f in zip_ref.namelist() if f.endswith('.csv')]
        if not csv_files:
            raise ValueError("No CSV file found in the ZIP archive")
        
        csv_file = csv_files[0]
        temp_dir = tempfile.mkdtemp()
        extracted_path = zip_ref.extract(csv_file, temp_dir)
        return extracted_path

def save_chunk_to_excel(output_excel, rows):
    wb = load_workbook(output_excel)
    ws = wb.active
    yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")

    for row in rows:
        ws.append([value for value, _ in row])
        for col, (_, color) in enumerate(row, start=1):
            if color:
                ws.cell(row=ws.max_row, column=col).fill = yellow_fill

    wb.save(output_excel)
    del wb

def process_input_to_excel(input_path, output_excel, columns_to_string, column_b_name, column_c_name, filter_value):
    start_time = time.time()

    if input_path.lower().endswith('.zip'):
        print("ZIP file detected. Extracting CSV...")
        csv_path = extract_csv_from_zip(input_path)
    else:
        csv_path = input_path

    encoding = detect_encoding(csv_path)
    print(f"Detected encoding: {encoding}")

    # Create initial workbook with header
    wb = Workbook()
    ws = wb.active
    header = pd.read_csv(csv_path, nrows=0, encoding=encoding).columns.tolist()
    ws.append([safe_value(col) for col in header])
    wb.save(output_excel)
    del wb

    chunk_size = 100000  # Adjust based on available memory
    total_rows = 0
    chunks_to_save = 5  # Number of chunks to process before saving

    with ProcessPoolExecutor(max_workers=os.cpu_count()) as executor:
        futures = []
        for chunk in pd.read_csv(csv_path, chunksize=chunk_size, encoding=encoding):
            chunk_data = (chunk, columns_to_string, column_b_name, column_c_name, filter_value)
            futures.append(executor.submit(process_chunk, chunk_data))

            if len(futures) >= chunks_to_save:
                all_rows = []
                for future in futures:
                    rows = future.result()
                    all_rows.extend(rows)
                    total_rows += len(rows)

                save_chunk_to_excel(output_excel, all_rows)
                print(f"Processed and saved {total_rows} rows...")
                futures = []

        # Process any remaining chunks
        if futures:
            all_rows = []
            for future in futures:
                rows = future.result()
                all_rows.extend(rows)
                total_rows += len(rows)

            save_chunk_to_excel(output_excel, all_rows)
            print(f"Processed and saved {total_rows} rows...")

    if input_path.lower().endswith('.zip'):
        os.remove(csv_path)
        os.rmdir(os.path.dirname(csv_path))

    end_time = time.time()
    print(f"Processing completed in {end_time - start_time:.2f} seconds")

if __name__ == "__main__":
    input_path = 'input_file.zip'
    output_excel = 'output_file.xlsx'
    columns_to_string = ['Column1', 'Column2']
    column_b_name = 'ColumnB'
    column_c_name = 'ColumnC'
    filter_value = 'A'

    process_input_to_excel(input_path, output_excel, columns_to_string, column_b_name, column_c_name, filter_value)
