import pandas as pd
import numpy as np
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import PatternFill
import time
import chardet
from concurrent.futures import ProcessPoolExecutor
import os
import zipfile
import tempfile
import pyarrow as pa
import pyarrow.parquet as pq

def detect_encoding(file_path):
    with open(file_path, 'rb') as file:
        raw = file.read(10000)
    return chardet.detect(raw)['encoding']

def process_chunk(chunk_data):
    chunk, columns_to_string, column_b_name, column_c_name, filter_value = chunk_data
    
    for col in columns_to_string:
        if col in chunk.columns:
            chunk[col] = chunk[col].astype(str)

    mask = chunk[column_b_name] == filter_value
    colors = np.zeros(chunk.shape, dtype=bool)
    
    if mask.any():
        columns_to_color = chunk.loc[mask, column_c_name].str.split(',', expand=True).stack().unique()
        color_indices = [chunk.columns.get_loc(col) for col in columns_to_color if col in chunk.columns]
        colors[mask[:, np.newaxis], color_indices] = True

    return chunk.to_numpy(), colors, mask.sum()

def extract_csv_from_zip(zip_path):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        csv_files = [f for f in zip_ref.namelist() if f.endswith('.csv')]
        if not csv_files:
            raise ValueError("No CSV file found in the ZIP archive")
        
        csv_file = csv_files[0]
        temp_dir = tempfile.mkdtemp()
        extracted_path = zip_ref.extract(csv_file, temp_dir)
        return extracted_path

def save_to_parquet(data, colors, output_parquet):
    df = pd.DataFrame(data, columns=data.columns)
    df['_colors'] = colors.tolist()
    table = pa.Table.from_pandas(df)
    pq.write_table(table, output_parquet, compression='snappy')

def process_input(input_path, output_parquet, columns_to_string, column_b_name, column_c_name, filter_value):
    start_time = time.time()

    if input_path.lower().endswith('.zip'):
        print("ZIP file detected. Extracting CSV...")
        csv_path = extract_csv_from_zip(input_path)
    else:
        csv_path = input_path

    encoding = detect_encoding(csv_path)
    print(f"Detected encoding: {encoding}")

    chunk_size = 1000000  # Increased chunk size
    total_rows = 0
    filtered_rows = 0

    # Initialize empty lists to store chunk results
    all_data = []
    all_colors = []

    with ProcessPoolExecutor(max_workers=os.cpu_count()) as executor:
        futures = []
        for chunk in pd.read_csv(csv_path, chunksize=chunk_size, encoding=encoding, low_memory=False):
            chunk_data = (chunk, columns_to_string, column_b_name, column_c_name, filter_value)
            futures.append(executor.submit(process_chunk, chunk_data))

        for future in futures:
            data, colors, filtered_count = future.result()
            all_data.append(data)
            all_colors.append(colors)
            total_rows += len(data)
            filtered_rows += filtered_count

    # Combine all chunks
    combined_data = np.vstack(all_data)
    combined_colors = np.vstack(all_colors)

    # Save to parquet
    save_to_parquet(pd.DataFrame(combined_data, columns=chunk.columns), combined_colors, output_parquet)

    print(f"Total rows processed: {total_rows}")
    print(f"Rows matching filter: {filtered_rows}")

    if input_path.lower().endswith('.zip'):
        os.remove(csv_path)
        os.rmdir(os.path.dirname(csv_path))

    end_time = time.time()
    print(f"Processing completed in {end_time - start_time:.2f} seconds")

def parquet_to_excel(input_parquet, output_excel):
    start_time = time.time()

    # Read the parquet file
    table = pq.read_table(input_parquet)
    df = table.to_pandas()

    # Extract color information
    colors = df['_colors'].tolist()
    df = df.drop('_colors', axis=1)

    # Create a new workbook and select the active sheet
    wb = Workbook()
    ws = wb.active

    # Write header
    for col_num, column_title in enumerate(df.columns, 1):
        ws.cell(row=1, column=col_num, value=column_title)

    # Write data and apply colors
    yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")

    for row_num, (_, row) in enumerate(df.iterrows(), 2):
        for col_num, value in enumerate(row, 1):
            cell = ws.cell(row=row_num, column=col_num, value=value)
            if colors[row_num-2][col_num-1]:
                cell.fill = yellow_fill

    # Save the workbook
    wb.save(output_excel)

    end_time = time.time()
    print(f"Excel conversion completed in {end_time - start_time:.2f} seconds")

if __name__ == "__main__":
    input_path = 'input_file.zip'
    output_parquet = 'output_file.parquet'
    output_excel = 'output_file.xlsx'
    columns_to_string = ['Column1', 'Column2']
    column_b_name = 'ColumnB'
    column_c_name = 'ColumnC'
    filter_value = 'A'

    process_input(input_path, output_parquet, columns_to_string, column_b_name, column_c_name, filter_value)
    parquet_to_excel(output_parquet, output_excel)
