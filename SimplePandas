import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import PatternFill
from openpyxl.cell import WriteOnlyCell
import time
import math
import chardet

def detect_encoding(file_path):
    with open(file_path, 'rb') as file:
        raw = file.read(10000)  # Read a chunk of the file
    return chardet.detect(raw)['encoding']

def safe_value(value):
    if isinstance(value, (int, float)):
        if math.isnan(value) or math.isinf(value):
            return ""
    return str(value)

def process_csv_to_excel(input_csv, output_excel, columns_to_string, column_b_name, column_c_name, filter_value):
    start_time = time.time()

    # Detect file encoding
    encoding = detect_encoding(input_csv)
    print(f"Detected encoding: {encoding}")

    # Read CSV using pandas with detected encoding
    try:
        df = pd.read_csv(input_csv, encoding=encoding)
    except:
        print("Failed with detected encoding. Trying UTF-8...")
        df = pd.read_csv(input_csv, encoding='utf-8')

    # Convert specified columns to string
    for col in columns_to_string:
        if col in df.columns:
            df[col] = df[col].astype(str)

    # Create workbook and worksheet
    wb = Workbook(write_only=True)
    ws = wb.create_sheet()

    # Prepare column indices
    column_b_index = df.columns.get_loc(column_b_name)
    column_c_index = df.columns.get_loc(column_c_name)

    # Prepare fill pattern
    yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")

    # Write header
    ws.append([safe_value(col) for col in df.columns])

    # Process rows
    for i, row in df.iterrows():
        excel_row = []
        if row[column_b_name] == filter_value:
            columns_to_color = set(str(row[column_c_name]).split(','))
            for j, value in enumerate(row):
                cell_value = safe_value(value)
                if df.columns[j] in columns_to_color:
                    cell = WriteOnlyCell(ws, value=cell_value)
                    cell.fill = yellow_fill
                    excel_row.append(cell)
                else:
                    excel_row.append(cell_value)
        else:
            excel_row = [safe_value(value) for value in row]
        
        ws.append(excel_row)

        if (i + 1) % 10000 == 0:
            print(f"Processed {i + 1} rows...")

    wb.save(output_excel)

    end_time = time.time()
    print(f"Processing completed in {end_time - start_time:.2f} seconds")

# Example usage
input_csv = 'huge_file.csv'
output_excel = 'output_file.xlsx'
columns_to_string = ['Column1', 'Column2']
column_b_name = 'ColumnB'  # Replace with the actual name of your column B
column_c_name = 'ColumnC'  # Replace with the actual name of your column C
filter_value = 'A'  # Replace with the actual value you want to filter on in column B

process_csv_to_excel(input_csv, output_excel, columns_to_string, column_b_name, column_c_name, filter_value)
